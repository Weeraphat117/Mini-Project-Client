{"version":3,"sources":["book.png","components/Navbar.js","firebase.js","components/BookList.js","components/BookForm.js","components/Dashboard.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","useEffect","elems","document","querySelectorAll","window","M","Sidenav","init","edge","className","href","data-target","to","id","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","BookList","useState","books","setBooks","console","log","unsub","collection","onSnapshot","snapshot","allBooks","docs","map","doc","data","book","key","src","bookThumb","alt","title","author","onClick","delete","style","cursor","BookForm","setBook","handleChange","e","target","name","value","onSubmit","preventDefault","add","type","onChange","placeholder","required","htmlFor","Dashboard","About","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba5de7b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.fb0a68e0.png\";","import React, { Fragment, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const elems = document.querySelectorAll('.sidenav');\r\n    window.M.Sidenav.init(elems, { edge: 'right' });\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <nav className='z-depth-0'>\r\n        <div className='nav-wrapper'>\r\n          <a href='/' className='brand'>\r\n            <span>Library</span>\r\n          </a>\r\n          <a\r\n            href='#!'\r\n            data-target='slide-out'\r\n            className='right sidenav-trigger'\r\n          >\r\n            <i className='material-icons'>menu</i>\r\n          </a>\r\n          <ul className='right hide-on-med-and-down'>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/about'>About</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n\r\n      <ul id='slide-out' className='sidenav'>\r\n        <li>\r\n          <Link to='/' className='waves-effect sidenav-close'>\r\n            <i className='material-icons'>home</i>Home\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/about' className='waves-effect sidenav-close'>\r\n            <i className='material-icons'>business</i>About\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import * as firebase from 'firebase/app';\r\n\r\n// Add the Firebase products that you want to use\r\nimport 'firebase/firestore';\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDqI05G6MuxJ9eILJmvVk-_sYdcMJxOngs\",\r\n    authDomain: \"library-27788.firebaseapp.com\",\r\n    databaseURL: \"https://library-27788.firebaseio.com\",\r\n    projectId: \"library-27788\",\r\n    storageBucket: \"library-27788.appspot.com\",\r\n    messagingSenderId: \"700975606227\",\r\n    appId: \"1:700975606227:web:23a6d3bfa53cc391daa726\"\r\n  };\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.firestore();","import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport bookThumb from '../book.png';\r\n\r\nconst BookList = () => {\r\n  const [books, setBooks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log('effect');\r\n    const unsub = db.collection('books').onSnapshot(snapshot => {\r\n      const allBooks = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      setBooks(allBooks);\r\n    });\r\n    return () => {\r\n      console.log('cleanup');\r\n      unsub();\r\n    };\r\n  }, []);\r\n\r\n  const deleteBook = id => {\r\n    db.collection('books')\r\n      .doc(id)\r\n      .delete();\r\n  };\r\n\r\n  return (\r\n    <div className='section section-books'>\r\n      <div className='container'>\r\n        <h6>Books</h6>\r\n        <ul>\r\n          {books.map(book => (\r\n            <li key={book.id}>\r\n              <div className='card book'>\r\n                <div className='book-image'>\r\n                  <img src={bookThumb} alt='book thumb' />\r\n                </div>\r\n                <div className='book-details'>\r\n                  <div className='book-title'>{book.title}</div>\r\n                  <div className='book-author'>{book.author}</div>\r\n                </div>\r\n                <div\r\n                  onClick={() => deleteBook(book.id)}\r\n                  className='book-delete'\r\n                  style={{ cursor: 'pointer' }}\r\n                >\r\n                  <i className='material-icons'>delete</i>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;","import React, { useState } from 'react';\r\nimport { db } from '../firebase';\r\n\r\nconst BookForm = () => {\r\n\r\n  const [book, setBook] = useState({\r\n    title: '',\r\n    author: ''\r\n  });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    db.collection('books').add(book);\r\n    setBook({\r\n      title: '',\r\n      author: ''\r\n    });\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setBook({ ...book, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className='section'>\r\n      <div className='container'>\r\n        <h6>Add Book</h6>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className='input-field'>\r\n            <input\r\n              type='text'\r\n              id='title'\r\n              name='title'\r\n              value={book.title}\r\n              onChange={handleChange}\r\n              placeholder='e.g. Tom and Jerry'\r\n              className='validate'\r\n              required\r\n            />\r\n            <label className='active' htmlFor='title'>\r\n              Title\r\n            </label>\r\n          </div>\r\n          <div className='input-field'>\r\n            <input\r\n              type='text'\r\n              id='author'\r\n              name='author'\r\n              value={book.author}\r\n              onChange={handleChange}\r\n              placeholder='e.g. Gene Deitch'\r\n              className='validate'\r\n              required\r\n            />\r\n            <label className='active' htmlFor='author'>\r\n              Author\r\n            </label>\r\n          </div>\r\n          <div className='input-field center'>\r\n            <button\r\n              type='submit'\r\n              className='btn waves-effect waves-light amber darken-2'>\r\n              <i className='material-icons right'>add_circle</i>Add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookForm;","import React, { Fragment } from 'react';\r\nimport BookList from './BookList';\r\nimport BookForm from './BookForm';\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <Fragment>\r\n      <BookList />\r\n      <BookForm />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className='container'>\r\n      <h5>About</h5>\r\n      <p>\r\n        A library is a curated collection of sources of information and similar resources, selected \r\n        by experts and made accessible to a defined community for reference or borrowing, often in \r\n        a quiet environment conducive to study. It provides physical or digital access to material,\r\n        and may be a physical location or a virtual space, or both. A library's collection can include \r\n        books, periodicals, newspapers, manuscripts, films, maps, prints, documents, microform, CDs, \r\n        cassettes, videotapes, DVDs, Blu-ray Discs, e-books, audiobooks, databases, and other formats.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Dashboard from './components/Dashboard';\nimport About from './components/About';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' component={Dashboard} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}